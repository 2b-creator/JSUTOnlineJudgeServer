# Generated by Django 5.1.3 on 2025-08-13 04:45

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import judge.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompetitionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('color', models.CharField(max_length=16)),
                ('basic_rate', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CompetitionProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('problem_char_id', models.CharField(max_length=100, unique=True)),
                ('content', models.TextField()),
                ('time_limit', models.IntegerField(default=1)),
                ('mem_limit', models.IntegerField(default=512)),
                ('test_case_path', models.TextField()),
                ('sample_path', models.TextField()),
                ('ac_count', models.IntegerField(default=0)),
                ('submit_count', models.IntegerField(default=0)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('edit_at', models.DateTimeField(auto_now=True)),
                ('special_judge_path', models.TextField(null=True)),
                ('order_tag', models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='MainProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('problem_char_id', models.CharField(max_length=100, unique=True)),
                ('content', models.TextField()),
                ('time_limit', models.IntegerField(default=1)),
                ('mem_limit', models.IntegerField(default=512)),
                ('test_case_path', models.TextField()),
                ('sample_path', models.TextField()),
                ('ac_count', models.IntegerField(default=0)),
                ('submit_count', models.IntegerField(default=0)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('edit_at', models.DateTimeField(auto_now=True)),
                ('special_judge_path', models.TextField(null=True)),
                ('is_public', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='JudgeUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ac_count', models.IntegerField(default=0)),
                ('nickname', models.CharField(blank=True, max_length=20)),
                ('submit_count', models.IntegerField(default=0)),
                ('stu_id', models.TextField()),
                ('avatar', models.TextField(null=True)),
                ('rating', models.IntegerField(default=0)),
                ('bio', models.CharField(blank=True, max_length=100)),
                ('email_verified', models.BooleanField(default=False)),
                ('domserver_password', models.TextField(default=judge.models.generate_domserver_password)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('solved', models.ManyToManyField(related_name='solved', to='judge.mainproblem')),
                ('tried', models.ManyToManyField(related_name='tried', to='judge.mainproblem')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('cid', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('active_time', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField(blank=True)),
                ('frozen_duration', models.DurationField(blank=True)),
                ('finish_time', models.DateTimeField(blank=True)),
                ('all_register_before_start', models.DurationField(default=datetime.timedelta(seconds=900))),
                ('is_rated', models.BooleanField(default=True)),
                ('scoreboard_final', models.JSONField(null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.competitiongroup')),
                ('problems', models.ManyToManyField(related_name='problems', to='judge.competitionproblem')),
            ],
        ),
        migrations.CreateModel(
            name='ContestRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('prefix', models.CharField(max_length=100)),
                ('status', models.CharField(default='accept', max_length=20)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.competition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'contest')},
            },
        ),
        migrations.AddField(
            model_name='competition',
            name='registered',
            field=models.ManyToManyField(related_name='registered_contest', through='judge.ContestRegistration', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DomServerSave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('singleton_id', models.IntegerField(default=1, editable=False, unique=True)),
                ('admin', models.CharField(max_length=100)),
                ('init_passwd', models.CharField(max_length=100)),
                ('api_key', models.CharField(max_length=100)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('singleton_id',), name='unique_singleton')],
            },
        ),
        migrations.CreateModel(
            name='ProblemTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('color', models.CharField(max_length=16)),
                ('problem', models.ManyToManyField(related_name='tags', to='judge.mainproblem')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField()),
                ('language', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('PD', 'Pending'), ('AC', 'Accepted'), ('WA', 'WrongAnswer'), ('RE', 'RunError'), ('TLE', 'TimeLimit'), ('MLE', 'MemLimit'), ('RJ', 'Reject'), ('CE', 'ComplieError')], default='PD', max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.mainproblem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='competition',
            name='submissions',
            field=models.ManyToManyField(related_name='submissions', to='judge.submission'),
        ),
        migrations.CreateModel(
            name='UserRatingHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField()),
                ('previous_rating', models.IntegerField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('reason', models.CharField(blank=True, max_length=100)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='judge.competition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_histories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
    ]
